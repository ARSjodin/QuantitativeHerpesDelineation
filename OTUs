## read in data ##

oral_swabs <- read.csv("data.csv")
rownames(oral_swabs) <- oral_swabs$X1
library(tidyverse)
oral_swabs <- select(oral_swabs, -X)
oral_swabs <- as.matrix(oral_swabs)

### the following set of code was written by Cale Basaraba 
#### Cale can be found at https://github.com/calebasaraba

##### Cale's code - creates function to sort PID matrix based on given PID#####

create_groups <- function(idMat, cutoff){
  loweroriginal <- idMat
  diag(loweroriginal)<-0
  over<-loweroriginal>=cutoff
  potential<-which(over, arr.ind = TRUE)
  columnvals<-c(potential[,2])
  columnvals<-unique(columnvals)
  taxalist<-list()
  for(j in columnvals){
    sametaxa<-c(potential[which(potential[,2]==j),1])
    finaltaxa<-c(j)
    for(i in sametaxa){
      finaltaxa[length(finaltaxa)+1]<-i
      nextlevel<-c(potential[which(potential[,2]==i),1])
      sametaxa<-c(nextlevel,sametaxa)
      sametaxa<-unique(sametaxa)
    }
    if(j==columnvals[1]){
      taxalist[[length(taxalist)+1]]<-finaltaxa
    }
    else if(!is.element(finaltaxa,taxalist[[length(taxalist)]])[1]){
      taxalist[[length(taxalist)+1]]<-finaltaxa}
  }
  
  alltaxarows<-c()
  for (i in taxalist){
    alltaxarows<-c(alltaxarows, i)
  }
  lonesomerows<-c()
  for (i in (1:length(colnames(idMat)))){
    if (i %in% alltaxarows){
    }else{
      lonesomerows <- c(lonesomerows, i)
    }
  }
  for (i in lonesomerows){
    taxalist[[length(taxalist)+1]]<-c(i)
  }
  #this is a reduction function that makes sure there is no overlap between groups
  reduceT <- function(x, input){
    b<-c()
    for(i in 1:length(input)){
      a<-intersect(x, input[[i]])
      if(length(a)>0){
        if(identical(x, a)){
          b<-c(b,x)
          b<-unique(b)
        }else{
          b<- c(b,x, input[[i]])
          b<-unique(b)
        }
      }
    }
    return(b)
  }
  
  #this is first round of reduction, just in case there is overlap
  scyther<-taxalist
  arcanine<-list()
  for(i in 1:length(scyther)){
    g <- reduceT(scyther[[i]], scyther)
    arcanine[[length(arcanine)+1]]<-g
  }
  
  # this reduces taxalists again
  blastoise<-list()
  for(i in 1:length(arcanine)){
    g <- reduceT(arcanine[[i]], arcanine)
    blastoise[[length(blastoise)+1]]<-g
  }
  blastoise<-lapply(blastoise, sort)
  blastoise<-unique(blastoise)
  taxalist<-blastoise
  # this creates the taxanames you see together
  taxanames<-c()
  for(i in 1:length(taxalist)){
    name<-paste0(cutoff,"group",i)
    taxanames[length(taxanames)+1]<-name
  }
  # this creates the output dataframe
  taxanames
  olaf<-matrix(c(0), nrow=length(taxanames),ncol=length(colnames(idMat)))
  for(i in 1:length(taxalist)){
    x<-taxalist[[i]]
    for(j in 1:length(x)){
      y<-x[j]
      olaf[i,y]<-1
    }
  }
  olaf<-data.frame(olaf)
  rownames(olaf)<-taxanames
  colnames(olaf)<-colnames(loweroriginal)
  final_groups<-olaf[,order(colnames(olaf))]
  final_groups
  results <- list(taxalist, final_groups)
}

######## end Cale's code ##########


### cutoff percentage determined using histogram
os93 <- create_groups(oral_swabs, 93)
os93.mat <- os93[[2]]

os92 <- create_groups(oral_swabs, 92)
os92.mat <- os92[[2]]
write.csv(os92.mat, "92mat_all_clones.csv") # this helps when there are multiple OTUs in multiple rounds of the assay

os91 <- create_groups(oral_swabs, 91)
os91.mat <- os91[[2]]

os90 <- create_groups(oral_swabs, 90)
os90.mat <- os90[[2]]

os81 <- create_groups(oral_swabs, 81)
os81.mat <- os81[[2]]

os80 <- create_groups(oral_swabs, 80)
os80.mat <- os80[[2]]

os74 <- create_groups(oral_swabs, 74)
os74.mat <- os74[[2]]


## condense names to be just unique ID number - code written by Cale Basaraba (https://github.com/calebasaraba)

os93.mat$group_name <- row.names(os93.mat)
gathered93 <- os93.mat %>%
  gather(key = sample, value = presence, starts_with("ARS"))
mutated93 <- gathered93 %>%
  mutate(sample_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,2]) %>%
  mutate(clone_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,3])
grouped93 <- mutated93 %>%
  group_by(sample_id, group_name) %>%
  summarize(presence = ifelse(sum(presence) > 0,1,0))
spreaded93 <- grouped93 %>%
  spread(key = group_name, value = presence)
final_osmat93 <- as.matrix(spreaded93[,-1])
row.names(final_osmat93) <- spreaded93$sample_id

final_osmat93 <- t(final_osmat93)

write.csv(final_osmat93, file="Final_Mat93_OS_26Nov.csv")

os92.mat$group_name <- row.names(os92.mat)
gathered92 <- os92.mat %>%
  gather(key = sample, value = presence, starts_with("ARS"))
mutated92 <- gathered92 %>%
  mutate(sample_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,2]) %>%
  mutate(clone_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,3])
grouped92 <- mutated92 %>%
  group_by(sample_id, group_name) %>%
  summarize(presence = ifelse(sum(presence) > 0,1,0))
spreaded92 <- grouped92 %>%
  spread(key = group_name, value = presence)
final_osmat92 <- as.matrix(spreaded92[,-1])
row.names(final_osmat92) <- spreaded92$sample_id

final_osmat92 <- t(final_osmat92)

write.csv(final_osmat92, file="Final_Mat92_OS_24Nov.csv")

os91.mat$group_name <- row.names(os91.mat)
gathered91 <- os91.mat %>%
  gather(key = sample, value = presence, starts_with("ARS"))
mutated91 <- gathered91 %>%
  mutate(sample_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,2]) %>%
  mutate(clone_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,3])
grouped91 <- mutated91 %>%
  group_by(sample_id, group_name) %>%
  summarize(presence = ifelse(sum(presence) > 0,1,0))
spreaded91 <- grouped91 %>%
  spread(key = group_name, value = presence)
final_osmat91 <- as.matrix(spreaded91[,-1])
row.names(final_osmat91) <- spreaded91$sample_id

final_osmat91 <- t(final_osmat91)
write.csv(final_osmat91, file="Final_Mat91_OS.csv")

os90.mat$group_name <- row.names(os90.mat)
gathered90 <- os90.mat %>%
  gather(key = sample, value = presence, starts_with("ARS"))
mutated90 <- gathered90 %>%
  mutate(sample_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,2]) %>%
  mutate(clone_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,3])
grouped90 <- mutated90 %>%
  group_by(sample_id, group_name) %>%
  summarize(presence = ifelse(sum(presence) > 0,1,0))
spreaded90 <- grouped90 %>%
  spread(key = group_name, value = presence)
final_osmat90 <- as.matrix(spreaded90[,-1])
row.names(final_osmat90) <- spreaded90$sample_id

final_osmat90 <- t(final_osmat90)
write.csv(final_osmat90, file="Final_Mat90_OS.csv")

os80.mat$group_name <- row.names(os80.mat)
gathered80 <- os80.mat %>%
  gather(key = sample, value = presence, starts_with("ARS"))
mutated80 <- gathered80 %>%
  mutate(sample_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,2]) %>%
  mutate(clone_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,3])
grouped80 <- mutated80 %>%
  group_by(sample_id, group_name) %>%
  summarize(presence = ifelse(sum(presence) > 0,1,0))
spreaded80 <- grouped80 %>%
  spread(key = group_name, value = presence)
final_osmat80 <- as.matrix(spreaded80[,-1])
row.names(final_osmat80) <- spreaded80$sample_id

final_osmat80 <- t(final_osmat80)
write.csv(final_osmat80, file="Final_Mat80_OS.csv")

os81.mat$group_name <- row.names(os81.mat)
gathered81 <- os81.mat %>%
  gather(key = sample, value = presence, starts_with("ARS"))
mutated81 <- gathered81 %>%
  mutate(sample_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,2]) %>%
  mutate(clone_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,3])
grouped81 <- mutated81 %>%
  group_by(sample_id, group_name) %>%
  summarize(presence = ifelse(sum(presence) > 0,1,0))
spreaded81 <- grouped81 %>%
  spread(key = group_name, value = presence)
final_osmat81 <- as.matrix(spreaded81[,-1])
row.names(final_osmat81) <- spreaded81$sample_id

final_osmat81 <- t(final_osmat81)
write.csv(final_osmat81, file="Final_Mat81_OS.csv")

os74.mat$group_name <- row.names(os74.mat)
gathered74 <- os74.mat %>%
  gather(key = sample, value = presence, starts_with("ARS"))
mutated74 <- gathered74 %>%
  mutate(sample_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,2]) %>%
  mutate(clone_id = str_match(sample, "PPR\\.([0-9]{4})\\.([0-9]{2})")[,3])
grouped74 <- mutated74 %>%
  group_by(sample_id, group_name) %>%
  summarize(presence = ifelse(sum(presence) > 0,1,0))
spreaded74 <- grouped74 %>%
  spread(key = group_name, value = presence)
final_osmat74 <- as.matrix(spreaded74[,-1])
row.names(final_osmat74) <- spreaded74$sample_id

final_osmat74 <- t(final_osmat74)
write.csv(final_osmat74, file="Final_Mat74_OS.csv")


############### affinity propogation ###############

library(apcluster)

### test it with a smaller matrix to make sure the code is working
#timber <- apcluster(mat, details=TRUE, q=0)
#timber
#plot(timber, X, xlim=c(-0.1, 0.1), ylim=c(-0.025, 0.025))
#plot(timber)
#timber
#timberAgg <- aggExCluster(mat, timber)
#plot(timberAgg)


#### using the default q = 0.5 is the median amount of ...? - gives 49 OTUs
##### setting q=0 is the most conservative clustering (fewest number clusters) - gives 48 OUTs

herpes <- read.csv("OS_NoNoclep_Mat_23Nov.csv")
herpes <- herpes[,-1]
herpes[is.na(herpes)] <- 100 # gotta change diags to 100, otherwise the NAs will screw it up
herpes <- as.matrix(herpes)

osAP <- apcluster(herpes)
summary(osAP)
# gives 45 OTUs - inconsistent with all cutoff points
str(osAP)

exemplars <- names(osAP@exemplars)
clusters <- osAP@clusters
names(clusters) <- names(osAP@exemplars)
str(clusters)

for(i in 1:length(clusters)){
  if(i==1){maxlength <- length(clusters[[i]])}
  if(i > 1){current_length <- length(clusters[[i]])
  if(current_length > maxlength){maxlength <- current_length}}
  
}

for(i in 1:length(clusters)){
  col1 <- names(clusters[[i]])
  length(col1) <- maxlength
  if(i==1){
    df <- col1
  }
  if(i > 1){
    df <- cbind(df, col1)
  }
  if(i == length(clusters)){colnames(df) <- names(clusters)}
}

write.csv(df, file = "OTUs_AffProp_45.csv")

# names(osAP@exemplars[i]) # this pulls out the exemplar of the cluster
# names(osAP@clusters[[i]]) # this will pull out all of the sequences that belong to the cluster
# str(osAP@clusters) # will show me each cluster with the number of sequences in the cluster


osAP.conservative <- apcluster(herpes, q=0)
summary(osAP.conservative)
# more conservative setting gives 44 OTUs - consistent with 91% cutoff - OTUs not consistent tho

exemplars2 <- names(osAP.conservative@exemplars)
clusters2 <- osAP.conservative@clusters
names(clusters2) <- names(osAP.conservative@exemplars)

for(i in 1:length(clusters2)){
  if(i==1){maxlength <- length(clusters2[[i]])}
  if(i > 1){current_length <- length(clusters2[[i]])
  if(current_length > maxlength){maxlength <- current_length}}
  
}

for(i in 1:length(clusters2)){
  col1 <- names(clusters2[[i]])
  length(col1) <- maxlength
  if(i==1){
    df2 <- col1
  }
  if(i > 1){
    df2 <- cbind(df2, col1)
  }
  if(i == length(clusters2)){colnames(df2) <- names(clusters2)}
}

write.csv(df2, file = "OTUs_AffProp_44.csv")
